class EvenPhase {
  /////////////////////////////////////////////////////////////////////////////////////////Class fields
  seq<int> inp_seq_cur;
  seq<seq<int>> inp_seq_all;
  /////////////////////////////////////////////////////////////////////////////////////////Even phase

  context_everywhere input != null;
  context_everywhere isSorted != null;
  context_everywhere contrib != null;
  context_everywhere loopCounter != null;
  context_everywhere input.length > 0;
  context_everywhere isSorted.length == 1;
  context_everywhere loopCounter.length == 1;
  context_everywhere contrib.length == input.length;
  context Perm(inp_seq_all, 1);
  context Perm(loopCounter[0], write);
  context loopCounter[0] >= 0;
  context |inp_seq_all| == loopCounter[0] + 1;
  context (\forall int i; 0 <= i && i < loopCounter[0]+1; input.length == |inp_seq_all[i]|);
  context (\forall* int i; 0 <= i && i < contrib.length; Perm(contrib[i], write));
  requires (\forall int i; 0 <= i && i < contrib.length; contrib[i] == 0);
  context (\forall* int i; 0 <= i && i < input.length; Perm(input[i], write));
  context Perm(isSorted[0], 1);
  context Perm(inp_seq_cur, 1);
  context |inp_seq_cur| == input.length;
  context (\forall int i; 0 <= i && i < input.length; {: input[i] :} == {: inp_seq_cur[i] :});
  context isPermutation<int>(inp_seq_all[0], inp_seq_cur);
  requires (\forall int i; 0 <= i && i < |inp_seq_cur|; {: inp_seq_cur[i] :} == {: inp_seq_all[loopCounter[0]][i] :});
  ensures (\forall int i; 0 <= i && i < contrib.length/2 && 2*i < contrib.length; contrib[2*i] == 1);
  ensures (\forall int i; 0 <= i && i < contrib.length/2 && 2*i+1 < contrib.length; contrib[2*i+1] == 0);
  ensures (\forall int i; 0 <= i && i < |inp_seq_all[loopCounter[0]]|/2 && 2*i+1 < |inp_seq_all[loopCounter[0]]|;
                        inp_seq_all[loopCounter[0]][2*i] <= inp_seq_all[loopCounter[0]][2*i+1]) ==>
                       (\forall int i; 0 <= i && i < |inp_seq_all[loopCounter[0]]|; inp_seq_cur[i] ==  inp_seq_all[loopCounter[0]][i]);
  ensures (\forall int i; 0 <= i && i < input.length/2 && 2*i+1 < input.length; input[2*i] <= input[2*i+1]);
  ensures (\forall int i; 0 <= i && i < |inp_seq_all[loopCounter[0]]|/2 && 2*i+1 < |inp_seq_all[loopCounter[0]]|;
                     ((inp_seq_all[loopCounter[0]][2*i] > inp_seq_all[loopCounter[0]][2*i+1]) ==>
                     (inp_seq_cur[2*i] == inp_seq_all[loopCounter[0]][2*i+1] && inp_seq_cur[2*i+1] == inp_seq_all[loopCounter[0]][2*i])));
  ensures (\forall int i; 0 <= i && i < |inp_seq_all[loopCounter[0]]|/2 && 2*i+1 < |inp_seq_all[loopCounter[0]]|;
                     ((inp_seq_all[loopCounter[0]][2*i] <= inp_seq_all[loopCounter[0]][2*i+1]) ==>
                     (inp_seq_cur[2*i] == inp_seq_all[loopCounter[0]][2*i] && inp_seq_cur[2*i+1] == inp_seq_all[loopCounter[0]][2*i+1])));
  ensures (\exists int i; 0 <= i && i < |inp_seq_all[loopCounter[0]]|/2 && 2*i+1 < |inp_seq_all[loopCounter[0]]|;
                     inp_seq_all[loopCounter[0]][2*i] > inp_seq_all[loopCounter[0]][2*i+1]) ==> !isSorted[0];
  ensures isSorted[0]  ==> (\forall int j; j >= 0 && j < |inp_seq_cur|; {: inp_seq_all[loopCounter[0]][j] :} == {: inp_seq_cur[j] :});
  void even_kernel(int[] input, boolean[] isSorted, int[] contrib, int[] loopCounter){
    invariant inv(Perm(isSorted[0], write) ** Perm(inp_seq_cur, 1) ** input.length == |inp_seq_cur|
                ** contrib.length == input.length ** Perm(loopCounter[0], write) ** Perm(inp_seq_all, 1)
                ** (loopCounter[0] >= 0 && |inp_seq_all| == loopCounter[0] + 1)
                ** (\forall int i; 0 <= i && i < loopCounter[0]+1; input.length == |{: inp_seq_all[i] :}|)
                ** (\forall* int i; 0 <= i && i < contrib.length; Perm({: contrib[i] :}, 1\2))
                ** (\forall* int i; 0 <= i && i < input.length; Perm( {:input[i] :}, write))
                ** (\forall int i; 0 <= i && i < input.length; {: input[i] :} == {: inp_seq_cur[i] :})
                ** isPermutation<int>(inp_seq_all[0], inp_seq_cur)
                ** ((\forall int i; 0 <= i && i < contrib.length/2 && 2*i < contrib.length; contrib[2*i] == 0)
                ==> (\forall int j; j >= 0 && j < |inp_seq_cur|; {: inp_seq_all[loopCounter[0]][j] :} == {: inp_seq_cur[j] :} ))

                ** ((\forall int i; 0 <= i && i < |inp_seq_all[loopCounter[0]]|/2 && 2*i < |inp_seq_all[loopCounter[0]]| - 1;
                  inp_seq_all[loopCounter[0]][2*i] <= inp_seq_all[loopCounter[0]][2*i+1])
                 ==> (\forall int i; 0 <= i && i < |inp_seq_all[loopCounter[0]]|; {: inp_seq_cur[i] :} == inp_seq_all[loopCounter[0]][i]))

                 ** (\forall int i; 0 <= i && i < input.length/2 && 2*i+1 < input.length && (contrib[2*i] == 1); input[2*i] <= input[2*i+1])
                 ** (\forall int i; 0 <= i && i < |inp_seq_all[loopCounter[0]]|/2 && 2*i+1 < |inp_seq_all[loopCounter[0]]|;
                  ((inp_seq_all[loopCounter[0]][2*i] > inp_seq_all[loopCounter[0]][2*i+1] && contrib[2*i] == 0)
                  ==> (inp_seq_cur[2*i] == inp_seq_all[loopCounter[0]][2*i] && inp_seq_cur[2*i+1] == inp_seq_all[loopCounter[0]][2*i+1])))

                  ** (\forall int i; 0 <= i && i < |inp_seq_all[loopCounter[0]]|/2 && 2*i+1 < |inp_seq_all[loopCounter[0]]|;
                  ((inp_seq_all[loopCounter[0]][2*i] > inp_seq_all[loopCounter[0]][2*i+1] && contrib[2*i] == 1)
                  ==> (inp_seq_cur[2*i] == inp_seq_all[loopCounter[0]][2*i+1] && inp_seq_cur[2*i+1] == inp_seq_all[loopCounter[0]][2*i])))
                  ** (\forall int i; 0 <= i && i < |inp_seq_all[loopCounter[0]]|/2 && 2*i+1 < |inp_seq_all[loopCounter[0]]|;
               ((inp_seq_all[loopCounter[0]][2*i] <= inp_seq_all[loopCounter[0]][2*i+1])
               ==> (inp_seq_cur[2*i] == inp_seq_all[loopCounter[0]][2*i] && inp_seq_cur[2*i+1] == inp_seq_all[loopCounter[0]][2*i+1])))
               ** ((\exists int i; 0 <= i && i < |inp_seq_all[loopCounter[0]]|/2 && 2*i+1 < |inp_seq_all[loopCounter[0]]|;
              inp_seq_all[loopCounter[0]][2*i] > inp_seq_all[loopCounter[0]][2*i+1] && contrib[2*i] == 1) ==> !isSorted[0])
              ** ((isSorted[0] && (\forall int i; 0 <= i && i < contrib.length/2 && 2*i < contrib.length; contrib[2*i] == 1))
              ==> (\forall int j; j >= 0 && j < |inp_seq_cur|; {: inp_seq_all[loopCounter[0]][j] :} == {: inp_seq_cur[j] :})))
            {
      par even(int tid=0..((input.length)/2))
      requires tid*2 < contrib.length ==> Perm(contrib[tid*2], 1\2);
      requires tid*2 < contrib.length ==> contrib[tid*2] == 0;
      ensures tid*2 < contrib.length ==> Perm(contrib[tid*2], 1\2);
      ensures tid*2 < contrib.length ==> contrib[tid*2] == 1;
      {
        atomic(inv){
          if((tid*2)+1 < input.length && input[tid*2] > input[(tid*2)+1])
          {
            lemma_permutation_apply<int>(inp_seq_all[0], inp_seq_cur, tid*2, tid*2+1);
            int temp = input[tid*2];
            input[tid*2] = input[(tid*2)+1];
            inp_seq_cur = inp_seq_cur[tid*2 -> input[(tid*2)+1]];
            input[(tid*2)+1] = temp;
            inp_seq_cur = inp_seq_cur[(tid*2)+1 -> temp];

            isSorted[0] = false;
          }

          if(tid*2 < contrib.length)
          {
            contrib[tid*2] = 1;
                      assume (\forall int i; 0 <= i && i < |inp_seq_all[loopCounter[0]]|/2 && 2*i+1 < |inp_seq_all[loopCounter[0]]|;
                            ((inp_seq_all[loopCounter[0]][2*i] > inp_seq_all[loopCounter[0]][2*i+1] && contrib[2*i] == 1)
                            ==> (inp_seq_cur[2*i] == inp_seq_all[loopCounter[0]][2*i+1] && inp_seq_cur[2*i+1] == inp_seq_all[loopCounter[0]][2*i])));
          }
        }

      }

    }

  }

}