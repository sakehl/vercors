class ParallelSummedAreaTable 
{
	
	///////////////////////////////////////////////////////////////////////////////Operations
	requires 0 <= n;
	requires n < |xs|;
	static pure int get(seq<int> xs, int n) = xs[n];
	
	requires 0 <= p;
	static pure int exp(int n, int p) = 0 < p ? n * exp(n, p - 1) : 1;
	
	requires n <= |xs|;
	ensures n < 0 ==> |Take(xs, n)| == 0;
	ensures 0 <= n ==> |Take(xs, n)| == n;
	ensures (\forall int i; 0 <= i && i < n; xs[i] == get(Take(xs, n), i));
	static pure seq<int> Take(seq<int> xs, int n) =
		0 < n ? seq<int> { head(xs) } + Take(tail(xs), n - 1) : seq<int> { };
	
	ensures |xs| == 0 ==> \result == 0;
	ensures |xs| == 1 ==> \result == head(xs);
	static pure int intsum(seq<int> xs) =
		0 < |xs| ? head(xs) + intsum(tail(xs)) : 0;
	
	requires 0 <= i && i <= |xs|;
	ensures |\result| == |xs| - i;
	ensures (\forall int j; 0 <= j && j < |\result|; \result[j] == intsum(Take(xs, i+j+1))); 
	static pure seq<int> psum(seq<int> xs, int i) =
		i < |xs| ? seq<int> { intsum(Take(xs, i + 1)) } + psum(xs, i + 1) : seq<int> { };
	
	ensures |\result| == |xs|;
	ensures (\forall int j; 0 <= j && j < |\result|; \result[j] == intsum(Take(xs, j+1))); 
	static pure seq<int> psum2(seq<int> xs) = psum(xs, 0);
	
	requires |input| >= 0;
	requires i >= 0;
	requires i <= |input|;
	requires offset > 0;
	requires offset <= |input|*2;
	ensures |\result| == |input| - i;
	ensures (\forall int j; 0 <= j && j < |\result|; \result[j] == intsum(Take(input, i + j + 1)) - intsum(Take(input, i + j + 1 - offset)));
	static pure seq<int> partial_prefixsum(seq<int> input, int i, int offset) = 	
		i < |input| ? seq<int> {intsum(Take(input, i + 1)) - intsum(Take(input, i + 1 - offset))} + partial_prefixsum(input, i + 1, offset)	: seq<int> { };	
	
	requires |xs| == N;
	requires (\forall int j; j >= 0 && j < N; |xs[j]| == N);
	requires i >= 0 && i <= N;
	requires index >= 0 && index < N;
	ensures |\result| == N-i;
	ensures (\forall int j; j >= 0 && j < |\result|; \result[j] == xs[i+j][index]);
	static pure seq<int> transpose_helper(seq<seq<int>> xs, int i, int index, int N) =
		i < N ? seq<int> {xs[i][index]} + transpose_helper(xs, i+1, index, N) : seq<int> { };
	
	requires |xs| == N;
	requires (\forall int j; j >= 0 && j < N; |xs[j]| == N);
	requires i >= 0 && i <= N;	
	ensures |\result| == N-i;
	ensures (\forall int j; j >= 0 && j < N-i; |\result[j]| == N);
	ensures (\forall int j; j >= 0 && j < N-i; 
		        (\forall int k; k >= 0 && k < N; \result[j][k] == xs[k][i+j]));
	static pure seq<seq<int>> transpose(seq<seq<int>> xs, int i, int N) =
		i < N ? seq<seq<int>> {transpose_helper(xs, 0, i, N)} + transpose(xs, i+1, N) : seq<seq<int>> { };
	
	requires |xs| == N;
	requires (\forall int j; j >= 0 && j < N; |xs[j]| == N); 
	requires i >= -1 && i < N;
	requires j >= -1 && j < N; 
	static pure int sum(seq<seq<int>> xs, int i, int j, int N) =	
	  i >= 0 ?  partial_sum(Take(xs[i], j+1), j, N) + sum(xs, i-1, j, N) : 0;
	
	requires j >= -1 && j < N;	
	ensures \result == intsum(xs);
	static pure int partial_sum(seq<int> xs, int j, int N) =
	  0 < |xs| ?  head(xs) + partial_sum(tail(xs), j, N) : 0;
	/////////////////////////////////////////////////////////////////////////////////////////////////Lemmas
	
		requires |xs| <= 1;
		requires i >= 0;
		requires offset > 0;
		requires offset <= |xs|;
		//requires i - offset < |xs|;
		ensures i < |xs| ==> xs == partial_prefixsum(xs, i, offset*2);
		void lemma_partial_prefixsum_base(seq<int> xs, int i, int offset) {
		}	
		
		requires 0 < n;
		ensures exp(2, n) == 2 * exp(2, n - 1);
		void lemma_exp2_red_mult(int n) {
		}
	
		requires 0 < n;
		ensures exp(2, n) / 2 == exp(2, n - 1);
		void lemma_exp2_red_div(int n) {
		}
	
		requires 0 <= n;
		ensures 0 < exp(2, n);
		void lemma_exp2_positive(int n) {
			if (0 < n) {
				lemma_exp2_positive(n - 1);
			}
		}
	
		requires 0 <= i;
		requires i <= j;
		ensures exp(2, i) <= exp(2, j);
		void lemma_exp2_leq(int i, int j) {
			if (0 < i) {
				lemma_exp2_leq(i - 1, j - 1);
			} else {
				lemma_exp2_positive(j);
			}
		}
		
		requires 0 <= i && i < |xs|;
		ensures get(psum2(xs), i) == intsum(Take(xs, i+1));
		void lemma_psum_get(seq<int> xs, int i) {
			if (0 < |xs|) {
				if (0 < i) {
					lemma_psum_get(tail(xs), i - 1);
				}
			}
		}
	
		ensures (\forall int i; 0 <= i && i < |xs|; get(psum2(xs), i) == intsum(Take(xs, i+1)));
		void lemma_psum_get_all(seq<int> xs) {
			int j = 0;
		
			loop_invariant 0 <= j && j <= |xs|;
			loop_invariant (\forall int k; 0 <= k && k < j; get(psum2(xs), k) == intsum(Take(xs, k+1)));
			while (j < |xs|) {
				lemma_psum_get(xs, j);
				j = j + 1;
			}
		}
		
		requires |xs| >= 0;
		requires |ys| >= 0;
		ensures |xs| == 0 ==> intsum(xs + ys) == intsum(ys);
		ensures |ys| == 0 ==> intsum(xs + ys) == intsum(xs);
		ensures |xs + ys| == |xs| + |ys|;
		ensures intsum(tail(xs) + ys) == intsum(tail(xs)) + intsum(ys);
		ensures intsum(xs + ys) == intsum(xs) + intsum(ys);
		void lemma_intsum_app(seq<int> xs, seq<int> ys) {
			if (0 < |xs|) {
				lemma_intsum_app(tail(xs), ys);
				assert tail(xs) + ys == tail(xs + ys);
			}
		}
		
		ensures intsum(seq<int> { }) == 0;
		void lemma_intsum_zero() {
		}
		
		ensures intsum(seq<int> { x }) == x;
		void lemma_intsum_single(int x) {
			assert tail(seq<int> { x }) == seq<int> { };
			lemma_intsum_zero();
		}
		
		requires 0 <= n && n < |xs|;
		ensures Take(xs, n + 1) == Take(xs, n) + seq<int> { xs[n] };
		void missing_lemma_2(seq<int> xs, int n) {
			if (1 <= n) {
				missing_lemma_2(tail(xs), n - 1);
			}
		}
		
		requires |xs| >= 0;
		requires i >= 0;
		requires i < |xs|;
		ensures xs[i] == intsum(Take(xs, i + 1)) - intsum(Take(xs, i));
		void lemma_intsum_Take(seq<int> xs, int i){
			missing_lemma_2(xs, i);
			assert Take(xs, i + 1) == Take(xs, i) + seq<int> {xs[i]};
			lemma_intsum_app(Take(xs, i), seq<int> {xs[i]});
			assert intsum( Take(xs, i) + seq<int> {xs[i]} ) == intsum(Take(xs, i)) + intsum(seq<int> {xs[i]});
			assert intsum(Take(xs, i + 1)) == intsum(Take(xs, i)) + intsum(seq<int> {xs[i]});
			lemma_intsum_single(xs[i]);
			assert xs[i] == intsum(seq<int> {xs[i]});
		}
		
		requires |xs| >= 0;
		ensures (\forall int i; 0 <= i && i < |xs|; xs[i] == intsum(Take(xs, i + 1)) - intsum(Take(xs, i)));
		void lemma_intsum_Take_all2(seq<int> xs) {
			int j = 0;
		
			loop_invariant 0 <= j && j <= |xs|;
			loop_invariant (\forall int k; 0 <= k && k < j; xs[k] == intsum(Take(xs, k + 1)) - intsum(Take(xs, k)));
			while (j < |xs|) {
				lemma_intsum_Take(xs, j);
				j = j + 1;
			}
		}
	////////////////////////////////////////////////////////////////////////////////////////////////First PrefixSum
	
	context_everywhere N > 0;
	context_everywhere input != null;
	context_everywhere output != null;
	context_everywhere input.length == N;
	context_everywhere output.length == N;
	context_everywhere (\forall int i; 0 <= i && i < N; input[i].length == N); 
	context_everywhere (\forall int i; 0 <= i && i < N; output[i].length == N);
	context_everywhere |input_seq| == N;
	context_everywhere (\forall int i; 0 <= i && i < N; |input_seq[i]| == N);
	requires |output_seq_pref_1| == 0;
	context (\forall* int i; 0 <= i && i < N; 
		        (\forall* int j; 0 <= j && j < N;Perm(input[i][j], read)));
	context (\forall* int i; 0 <= i && i < N; 
						(\forall* int j; 0 <= j && j < N;Perm(output[i][j], read)));
	requires (\forall* int i; 0 <= i && i < N; 
		         (\forall* int j; 0 <= j && j < N; output[i][j] == input[i][j]));
	context (\forall int i; 0 <= i && i < N; 
		         (\forall int j; 0 <= j && j < N; input_seq[i][j] == input[i][j]));
	ensures |output_seq_pref_1| == N;
	ensures (\forall int i; 0 <= i && i < N; |output_seq_pref_1[i]| == N);
	ensures (\forall int i; 0 <= i && i < N; 
				 		   (\forall int j; 0 <= j && j < N;	output_seq_pref_1[i][j] == get(psum2(input_seq[i]), j)));
	ensures (\forall int i; 0 <= i && i < N;  
								 		 (\forall int j; 0 <= j && j < N; output[i][j] == get(psum2(input_seq[i]), j)));
	ensures (\forall int i; 0 <= i && i < N;  
								 		(\forall int j; 0 <= j && j < N; output[i][j] == output_seq_pref_1[i][j]));
	void First_PrefixSum_Kernel(int[][] input, int[][] output, seq<seq<int>> input_seq, seq<seq<int>> output_seq_pref_1, int N)
	{
		int row = 0;
		
		loop_invariant row >=0 && row <= N;
		loop_invariant |output_seq_pref_1| == row;
		loop_invariant |input_seq| == N;
		loop_invariant (\forall int i; 0 <= i && i < N; input[i].length == N);
		loop_invariant (\forall int i; 0 <= i && i < N; output[i].length == N);
		loop_invariant (\forall int i; 0 <= i && i < N; |input_seq[i]| == N);
		loop_invariant (\forall int i; 0 <= i && i < row; |output_seq_pref_1[i]| == N);
		loop_invariant (\forall* int i; 0 <= i && i < N; 
		        (\forall* int j; 0 <= j && j < N;Perm(input[i][j], read)));
		loop_invariant (\forall* int i; 0 <= i && i < N; 
						(\forall* int j; 0 <= j && j < N;Perm(output[i][j], read)));
		loop_invariant (\forall int i; row <= i && i < N; 
		         (\forall int j; 0 <= j && j < N; output[i][j] == input[i][j]));
		loop_invariant (\forall int i; 0 <= i && i < row; 
				 		   (\forall int j; 0 <= j && j < N;	output_seq_pref_1[i][j] == get(psum2(input_seq[i]), j)));	
		loop_invariant (\forall int i; 0 <= i && i < N;  
			               (\forall int j; 0 <= j && j < N; input_seq[i][j] == input[i][j]));		
		loop_invariant (\forall int i; 0 <= i && i < row;  
								 		 (\forall int j; 0 <= j && j < N; output[i][j] == get(psum2(input_seq[i]), j)));
		loop_invariant (\forall int i; 0 <= i && i < row;  
								 		(\forall int j; 0 <= j && j < N; output[i][j] == output_seq_pref_1[i][j]));                       
		while(row < N){
		    seq<int> result_seq_1 = input_seq[row];
			  
				
				par FirstPrefixSum (int tid=0..N)		
    		
				context row >=0 && row < N;
				context input[row].length == output[row].length;
				context input[row].length == N;
				context |input_seq[row]| == N;
				context |input_seq[row]| == output[row].length;
				context Perm(input[row][tid], read);
				context Perm(output[row][tid], read); 
				context |result_seq_1| == N;
				requires tid >= 1 ==> Perm(output[row][tid - 1], read); 
				requires output[row][tid] == input_seq[row][tid];
				context input[row][tid] == input_seq[row][tid];
				ensures output[row][tid] == get(psum2(input_seq[row]), tid);	
    		{
    		 	  int offset = 1;
						int temp;
						seq<int> temp_seq_1 = input_seq[row]; //ghost code
						lemma_intsum_Take(temp_seq_1, tid);
						assert tid < offset ==> output[row][tid] == temp_seq_1[tid];
									
						loop_invariant offset >= 1;
						loop_invariant |temp_seq_1| == |input_seq[row]|;
						loop_invariant offset < 2 * output[row].length;
						loop_invariant Perm(output[row][tid], read); 
						loop_invariant tid >= offset ==> Perm(output[row][tid - offset], read); 
						loop_invariant temp_seq_1[tid] == intsum(Take(input_seq[row], tid + 1)) - intsum(Take(input_seq[row], tid + 1 - offset));
						loop_invariant tid < offset ==> temp_seq_1[tid] == intsum(Take(input_seq[row], tid + 1));
						loop_invariant tid < offset ==> temp_seq_1[tid] == get(psum2(input_seq[row]), tid);
						loop_invariant temp_seq_1[tid] == get(partial_prefixsum(input_seq[row], 0, offset), tid);
						loop_invariant tid < offset ==> output[row][tid] == temp_seq_1[tid]; 
						while(offset < output[row].length)
						{
							
							temp = output[row][tid];
							
							if (tid >= offset)
							{ 
								temp = temp + output[row][tid - offset];	
							}
							assert tid < offset ==> temp == output[row][tid];
							assert tid >= offset ==> temp == output[row][tid] + output[row][tid - offset];
							
							barrier(FirstPrefixSum) 
							{
								context tid >= 0 && tid < output[row].length;
								context offset >= 1 && offset < output[row].length;
								requires Perm(output[row][tid], read);
								requires tid >= offset ==> Perm(output[row][tid - offset], read);
								requires tid >= offset ==> temp == output[row][tid] + output[row][tid - offset];				
								ensures Perm(output[row][tid], write);		
							}
							
							if (tid >= offset)
							{ 
								output[row][tid] = temp;
							}
							
							temp_seq_1 = partial_prefixsum(input_seq[row], 0, offset * 2);
							assert temp_seq_1[tid] == intsum(Take(input_seq[row], tid + 1)) - intsum(Take(input_seq[row], tid + 1 - offset * 2));
							assert tid < offset ==> temp_seq_1[tid] == intsum(Take(input_seq[row], tid + 1));
							assert tid < offset ==> temp_seq_1[tid] == get(psum2(input_seq[row]), tid);
							assert temp_seq_1[tid] == get(partial_prefixsum(input_seq[row], 0, offset * 2), tid);
							assert tid < offset ==> output[row][tid] == temp_seq_1[tid];
							
							barrier(FirstPrefixSum) 
							{
								context tid >= 0 && tid < output[row].length;
								context offset >= 1 && offset < output[row].length;
								requires Perm(output[row][tid], write);
								ensures Perm(output[row][tid], read);
								ensures tid >= offset * 2 ==> Perm(output[row][tid - offset * 2], read);
							
							}
							
							offset = offset * 2;
							
							
   			 	  }
						
						assert temp_seq_1[tid] == get(psum2(input_seq[row]), tid);
						assert output[row][tid] == temp_seq_1[tid];
						assert output[row][tid] == get(psum2(input_seq[row]), tid);
						assert input[row][tid] == input_seq[row][tid];
						
						
						result_seq_1 = temp_seq_1;
						
						
				}
				 
				
				output_seq_pref_1 = output_seq_pref_1 + seq<seq<int>> {result_seq_1};
				
				
				row = row + 1;
				

		}
		
	}
	////////////////////////////////////////////////////////////////////////////////////////////////Transpose
	
	context_everywhere N > 0;
	context_everywhere output != null;
	context_everywhere output.length == N; 
	context_everywhere (\forall int i; 0 <= i && i < N; output[i].length == N);
	context_everywhere |output_seq_pref_1| == N;
	context_everywhere (\forall int i; 0 <= i && i < N; |output_seq_pref_1[i]| == N);
	context (\forall* int i; 0 <= i && i < N; 
						(\forall* int j; 0 <= j && j < N;Perm(output[i][j], read)));
	requires (\forall int i; 0 <= i && i < N;  
								 		(\forall int j; 0 <= j && j < N; output[i][j] == output_seq_pref_1[i][j]));		
	ensures (\forall int i; 0 <= i && i < N;  
						(\forall int j; 0 <= j && j < N; output[i][j] == output_seq_pref_1[j][i]));			
	void Transpose_Kernel(int[][] output, seq<seq<int>> output_seq_pref_1, int N)
	{
		par TransposeX (int tidX=0..N)		
    
		context tidX >= 0 && tidX < N;
		context output.length == N;
		context output[tidX].length == N;
		context |output_seq_pref_1| == N;
		context (\forall int i; i >= 0 && i < N; |output_seq_pref_1[i]| == N);
		requires (\forall* int i; i >= 0 && i < N; Perm(output[tidX][i], read)); 
		requires (\forall int i; i >= 0 && i < N; output[tidX][i] == output_seq_pref_1[tidX][i]);
		ensures (\forall* int i; i >= 0 && i < N; Perm(output[i][tidX], read));
		ensures (\forall int i; i >= 0 && i < N; output[i][tidX] == output_seq_pref_1[tidX][i]);
		{
			
			par TransposeY (int tidY=0..N)		
  		
			context output.length == N;
			context output[tidX].length == N;
			context tidX >= 0 && tidX < N;
			context tidY >= 0 && tidY < N;
			context |output_seq_pref_1| == N;
			context (\forall int i; i >= 0 && i < N; |output_seq_pref_1[i]| == N);
			requires Perm(output[tidX][tidY], read);	
			requires output[tidX][tidY] == output_seq_pref_1[tidX][tidY];
			ensures Perm(output[tidY][tidX], write);
			ensures output[tidY][tidX] == output_seq_pref_1[tidX][tidY];
  		{
					
				int temporary;
				temporary = output[tidX][tidY];
				
				barrier(TransposeY) 
				{
					context tidX >= 0 && tidX < N;
					context tidY >= 0 && tidY < N;
					requires Perm(output[tidX][tidY], read);
					ensures Perm(output[tidY][tidX], write);		
				}
				
				output[tidY][tidX] = temporary;
				
			}
			
		}
		

		assert (\forall int i; 0 <= i && i < N;  
						(\forall int j; 0 <= j && j < N; output[i][j] == output_seq_pref_1[j][i]));
		
	}	
	////////////////////////////////////////////////////////////////////////////////////////////////Second prefixsum
	
	context_everywhere N > 0;
	context_everywhere output != null;
	context_everywhere output.length == N; 
	context_everywhere (\forall int i; 0 <= i && i < N; output[i].length == N);
	context_everywhere |output_seq_pref_1_transposed| == N;
	context_everywhere (\forall int i; 0 <= i && i < N; |output_seq_pref_1_transposed[i]| == N);
	requires |output_seq_pref_2| == 0;
	context (\forall* int i; 0 <= i && i < N; 
						(\forall* int j; 0 <= j && j < N;Perm(output[i][j], read)));
	requires (\forall int i; 0 <= i && i < N; 
		         (\forall int j; 0 <= j && j < N; output_seq_pref_1_transposed[i][j] == output[i][j]));
	ensures |output_seq_pref_2| == N;
	ensures (\forall int i; 0 <= i && i < N; |output_seq_pref_2[i]| == N);
	ensures (\forall int i; 0 <= i && i < N; 
				 		   (\forall int j; 0 <= j && j < N;	output_seq_pref_2[i][j] == get(psum2(output_seq_pref_1_transposed[i]), j)));
	ensures (\forall int i; 0 <= i && i < N;  
								 		 (\forall int j; 0 <= j && j < N; output[i][j] == get(psum2(output_seq_pref_1_transposed[i]), j)));
	ensures (\forall int i; 0 <= i && i < N;  
								 		(\forall int j; 0 <= j && j < N; output[i][j] == output_seq_pref_2[i][j]));
	void Second_PrefixSum_Kernel(int[][] output, seq<seq<int>> output_seq_pref_1_transposed, seq<seq<int>> output_seq_pref_2, int N)
	{
		int row =0;
			  			
		loop_invariant row >=0 && row <= N;
		loop_invariant |output_seq_pref_2| == row;
		loop_invariant |output_seq_pref_1_transposed| == N;
		loop_invariant (\forall int i; 0 <= i && i < N; output[i].length == N);
		loop_invariant (\forall int i; 0 <= i && i < N; |output_seq_pref_1_transposed[i]| == N);
		loop_invariant (\forall int i; 0 <= i && i < row; |output_seq_pref_2[i]| == N);										
		loop_invariant (\forall* int i; 0 <= i && i < N; 
						(\forall* int j; 0 <= j && j < N; Perm(output[i][j], read)));						
		loop_invariant (\forall int i; row <= i && i < N; 
		         (\forall int j; 0 <= j && j < N; output[i][j] == output_seq_pref_1_transposed[i][j]));					 
		loop_invariant (\forall int i; 0 <= i && i < row; 
				 		   (\forall int j; 0 <= j && j < N;	output_seq_pref_2[i][j] == get(psum2(output_seq_pref_1_transposed[i]), j)));		
		loop_invariant (\forall int i; 0 <= i && i < row;  
								 		 (\forall int j; 0 <= j && j < N; output[i][j] == get(psum2(output_seq_pref_1_transposed[i]), j)));										 
		loop_invariant (\forall int i; 0 <= i && i < row;  
								 		(\forall int j; 0 <= j && j < N; output[i][j] == output_seq_pref_2[i][j]));                  
		while(row < N){
		    seq<int> result_seq_2 = output_seq_pref_1_transposed[row];
			  				
				
				par SecondPrefixSum (int tid=0..N)		
    		
				
				context row >=0 && row < N;
				context tid >=0 && tid < N;
				context |output_seq_pref_1_transposed| == N;
				context output[row].length == N;
				context |output_seq_pref_1_transposed[row]| == N;
				context |output_seq_pref_1_transposed[row]| == output[row].length;
				context Perm(output[row][tid], read); 
				context |result_seq_2| == N;
				requires tid >= 1 ==> Perm(output[row][tid - 1], read); 
				requires output[row][tid] == output_seq_pref_1_transposed[row][tid];
				ensures output[row][tid] == get(psum2(output_seq_pref_1_transposed[row]), tid);	
    		{
					
					
    		 	  int offset_2 = 1;
						int temp;
						seq<int> temp_seq_2 = output_seq_pref_1_transposed[row]; //ghost code
						lemma_intsum_Take(temp_seq_2, tid);
						assert tid < offset_2 ==> output[row][tid] == temp_seq_2[tid];
						
									
						loop_invariant offset_2 >= 1;
						loop_invariant |temp_seq_2| == |output_seq_pref_1_transposed[row]|;
						loop_invariant offset_2 < 2 * output[row].length;
						loop_invariant Perm(output[row][tid], read); 
						loop_invariant tid >= offset_2 ==> Perm(output[row][tid - offset_2], read); 
						loop_invariant temp_seq_2[tid] == intsum(Take(output_seq_pref_1_transposed[row], tid + 1)) - intsum(Take(output_seq_pref_1_transposed[row], tid + 1 - offset_2));
						loop_invariant tid < offset_2 ==> temp_seq_2[tid] == intsum(Take(output_seq_pref_1_transposed[row], tid + 1));
						loop_invariant tid < offset_2 ==> temp_seq_2[tid] == get(psum2(output_seq_pref_1_transposed[row]), tid);
						loop_invariant temp_seq_2[tid] == get(partial_prefixsum(output_seq_pref_1_transposed[row], 0, offset_2), tid);
						loop_invariant tid < offset_2 ==> output[row][tid] == temp_seq_2[tid]; 
						while(offset_2 < output[row].length)
						{
							
							temp = output[row][tid];
							
							if (tid >= offset_2)
							{ 
								temp = temp + output[row][tid - offset_2];	
							}
							assert tid < offset_2 ==> temp == output[row][tid];
							assert tid >= offset_2 ==> temp == output[row][tid] + output[row][tid - offset_2];
							
							barrier(SecondPrefixSum) 
							{
								context tid >= 0 && tid < output[row].length;
								context offset_2 >= 1 && offset_2 < output[row].length;
								requires Perm(output[row][tid], read);
								requires tid >= offset_2 ==> Perm(output[row][tid - offset_2], read);
								requires tid >= offset_2 ==> temp == output[row][tid] + output[row][tid - offset_2];				
								ensures Perm(output[row][tid], write);		
							}
							
							if (tid >= offset_2)
							{ 
								output[row][tid] = temp;
							}
							
							temp_seq_2 = partial_prefixsum(output_seq_pref_1_transposed[row], 0, offset_2 * 2);
							assert temp_seq_2[tid] == intsum(Take(output_seq_pref_1_transposed[row], tid + 1)) - intsum(Take(output_seq_pref_1_transposed[row], tid + 1 - offset_2 * 2));
							assert tid < offset_2 ==> temp_seq_2[tid] == intsum(Take(output_seq_pref_1_transposed[row], tid + 1));
							assert tid < offset_2 ==> temp_seq_2[tid] == get(psum2(output_seq_pref_1_transposed[row]), tid);
							assert temp_seq_2[tid] == get(partial_prefixsum(output_seq_pref_1_transposed[row], 0, offset_2 * 2), tid);
							assert tid < offset_2 ==> output[row][tid] == temp_seq_2[tid];
							
							barrier(SecondPrefixSum) 
							{
								context tid >= 0 && tid < output[row].length;
								context offset_2 >= 1 && offset_2 < output[row].length;
								requires Perm(output[row][tid], write);
								ensures Perm(output[row][tid], read);
								ensures tid >= offset_2 * 2 ==> Perm(output[row][tid - offset_2 * 2], read);
							
							}
							
							offset_2 = offset_2 * 2;
							
							
   			 	  }
						
						assert temp_seq_2[tid] == get(psum2(output_seq_pref_1_transposed[row]), tid);
						assert output[row][tid] == temp_seq_2[tid];
						assert output[row][tid] == get(psum2(output_seq_pref_1_transposed[row]), tid);
						//assert input[row][tid] == output_seq_pref_1_transposed[row][tid];
						
						
						result_seq_2 = temp_seq_2;
						
						
				}
				
				
				 
				assert (\forall int i; 0 <= i && i < N; output[row][i] == get(psum2(output_seq_pref_1_transposed[row]), i));
				output_seq_pref_2 = output_seq_pref_2 + seq<seq<int>> {result_seq_2};
 
				
				row = row + 1;
						

		}
		
	}
		
	////////////////////////////////////////////////////////////////////////////////////////////////Main Program
	
	given seq<seq<int>> input_seq;
	context_everywhere N > 0;
	context_everywhere input != null;
	context_everywhere output != null;
	context_everywhere input.length == N;
	context_everywhere output.length == N;
	context_everywhere (\forall int i; 0 <= i && i < N; input[i].length == N); 
	context_everywhere (\forall int i; 0 <= i && i < N; output[i].length == N);
	context_everywhere |input_seq| == N;
	context_everywhere (\forall int i; 0 <= i && i < N; |input_seq[i]| == N);
	context (\forall* int i; 0 <= i && i < N; 
		        (\forall* int j; 0 <= j && j < N;Perm(input[i][j], read)));
	context (\forall* int i; 0 <= i && i < N; 
						(\forall* int j; 0 <= j && j < N;Perm(output[i][j], read)));
	requires (\forall* int i; 0 <= i && i < N; 
		         (\forall* int j; 0 <= j && j < N; output[i][j] == input[i][j]));
	context (\forall int i; 0 <= i && i < N; 
		         (\forall int j; 0 <= j && j < N; input_seq[i][j] == input[i][j]));
	ensures (\forall int i; 0 <= i && i < N; 
			      (\forall int j; 0 <= j && j < N; output[i][j] == sum(input_seq, i, j, N) )); 
	void SAT(int[][] input, int[][] output, int N) 
	{
		
		seq<seq<int>> output_seq_pref_1 = seq<seq<int>> {};
		seq<seq<int>> output_seq_pref_2 = seq<seq<int>> {};
			
		////////////////////////////////////////////////////////////////////////////////////////////First Prefixsum	
		
		First_PrefixSum_Kernel(input, output, input_seq, output_seq_pref_1, N);
				
		////////////////////////////////////////////////////////////////////////////////////////////First Transpose
		
		assert (\forall int i; 0 <= i && i < N;  
								 		(\forall int j; 0 <= j && j < N; output[i][j] == output_seq_pref_1[i][j]));
						
		Transpose_Kernel(output, output_seq_pref_1, N);
		
		seq<seq<int>> output_seq_pref_1_transposed = transpose(output_seq_pref_1, 0, N);	
		assert (\forall int i; i >= 0 && i < N; 
						(\forall int j; j >= 0 && j < N; output_seq_pref_1_transposed[i][j] == output_seq_pref_1[j][i]));
		
		assert (\forall int i; 0 <= i && i < N; 
						(\forall int j; 0 <= j && j < N;	output_seq_pref_1[i][j] == get(psum2(input_seq[i]), j)));
		
		assert (\forall int i; i >= 0 && i < N; 
						(\forall int j; j >= 0 && j < N; output_seq_pref_1_transposed[i][j] == get(psum2(input_seq[j]), i)));				
		
		assert (\forall int i; 0 <= i && i < N;  
						(\forall int j; 0 <= j && j < N; output[i][j] == output_seq_pref_1_transposed[i][j]));
						
		
		////////////////////////////////////////////////////////////////////////////////////////////Second Prefixsum
		
		Second_PrefixSum_Kernel(output, output_seq_pref_1_transposed, output_seq_pref_2, N);	
		
		////////////////////////////////////////////////////////////////////////////////////////////Second Transpose
		
		assert (\forall int i; 0 <= i && i < N;  
								 		(\forall int j; 0 <= j && j < N; output[i][j] == output_seq_pref_2[i][j]));
						
		Transpose_Kernel(output, output_seq_pref_2, N);
		
		seq<seq<int>> output_seq_pref_2_transposed = transpose(output_seq_pref_2, 0, N);	
		assert (\forall int i; i >= 0 && i < N; 
						(\forall int j; j >= 0 && j < N; output_seq_pref_2_transposed[i][j] == output_seq_pref_2[j][i]));
						
		////////////////////////////////////////////////////////////////////////////////////////////
		
		assert (\forall int i; 0 <= i && i < N;  
						(\forall int j; 0 <= j && j < N; output[i][j] == output_seq_pref_2_transposed[i][j]));			
		
														
		assert (\forall int i; i >= 0 && i < N; 
						(\forall int j; j >= 0 && j < N; output_seq_pref_2_transposed[i][j] == get(psum2(output_seq_pref_1_transposed[j]), i)));
									
										 
		assert (\forall int i; i >= 0 && i < N; 
						(\forall int j; j >= 0 && j < N; output_seq_pref_1_transposed[i][j] == get(psum2(input_seq[j]), i)));
						
						
		assert (\forall int i; 0 <= i && i < N; 
			      (\forall int j; 0 <= j && j < N; output[i][j] == sum(input_seq, i, j, N) ));
	
	  assert (\forall int i; 0 <= i && i < N; 
		         (\forall int j; 0 <= j && j < N; input_seq[i][j] == input[i][j]));
						 		               
			
	} 		
	
}









