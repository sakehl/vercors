prover_type bv16 \smtlib `(_ BitVec 16)`;

prover_function bv16 bv16_from_sint(int x) \smtlib `(_ int2bv 16)`;
prover_function bv16 bv16_from_uint(int x) \smtlib `(_ int2bv 16)`;
prover_function int bv16_to_uint(bv16 x) \smtlib `bv2nat`;
prover_function bv16 bv16_and(bv16 x, bv16 y) \smtlib `bvand`;
prover_function bv16 bv16_or(bv16 x, bv16 y) \smtlib `bvor`;
prover_function bv16 bv16_xor(bv16 x, bv16 y) \smtlib `bvxor`;
prover_function bv16 bv16_shl(bv16 x, bv16 y) \smtlib `bvshl`;
prover_function bv16 bv16_shr(bv16 x, bv16 y) \smtlib `bvashr`;
prover_function bv16 bv16_ushr(bv16 x, bv16 y) \smtlib `bvlshr`;
prover_function bv16 bv16_not(bv16 x) \smtlib `bvnot`;

prover_function boolean bv16_slt(bv16 a, bv16 b) \smtlib `bvslt`;
prover_function bv16 bv16_zero() \smtlib `#x0000`;

pure int bv16_to_sint(bv16 x) = bv16_slt(x, bv16_zero()) ? bv16_to_uint(x) - 65536 : bv16_to_uint(x);

ensures \result == (0 <= x && x <= 65535);
ensures \result == (x == bv16_to_uint(bv16_from_uint(x)));
pure boolean u16_is_inbounds(int x);

ensures \polarity_dependent(bv16_from_uint(bv16_to_uint(x)) == x, true);
pure boolean u16_assume_inbounds(bv16 x) = true;

requires u16_is_inbounds(x);
pure int u16_require_inbounds(int x) = x;

ensures \result == (-32768 <= x && x <= 32767);
ensures \result == (x == bv16_to_sint(bv16_from_sint(x)));
pure boolean s16_is_inbounds(int x);

ensures \polarity_dependent(bv16_from_sint(bv16_to_sint(x)) == x, true);
pure boolean s16_assume_inbounds(bv16 x) = true;

requires s16_is_inbounds(x);
pure int s16_require_inbounds(int x) = x;

