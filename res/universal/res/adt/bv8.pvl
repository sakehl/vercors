prover_type bv8 \smtlib `(_ BitVec 8)`;

prover_function bv8 bv8_from_sint(int x) \smtlib `(_ int2bv 8)`;
prover_function bv8 bv8_from_uint(int x) \smtlib `(_ int2bv 8)`;
prover_function int bv8_to_uint(bv8 x) \smtlib `bv2nat`;
prover_function bv8 bv8_and(bv8 x, bv8 y) \smtlib `bvand`;
prover_function bv8 bv8_or(bv8 x, bv8 y) \smtlib `bvor`;
prover_function bv8 bv8_xor(bv8 x, bv8 y) \smtlib `bvxor`;
prover_function bv8 bv8_shl(bv8 x, bv8 y) \smtlib `bvshl`;
prover_function bv8 bv8_shr(bv8 x, bv8 y) \smtlib `bvashr`;
prover_function bv8 bv8_ushr(bv8 x, bv8 y) \smtlib `bvlshr`;
prover_function bv8 bv8_not(bv8 x) \smtlib `bvnot`;

prover_function boolean bv8_slt(bv8 a, bv8 b) \smtlib `bvslt`;
prover_function bv8 bv8_zero() \smtlib `#x00`;

pure int bv8_to_sint(bv8 x) = bv8_slt(x, bv8_zero()) ? bv8_to_uint(x) - 256 : bv8_to_uint(x);

ensures \result == (0 <= x && x <= 255);
ensures \result == (x == bv8_to_uint(bv8_from_uint(x)));
pure boolean u8_is_inbounds(int x);

ensures \polarity_dependent(bv8_from_uint(bv8_to_uint(x)) == x, true);
pure boolean u8_assume_inbounds(bv8 x) = true;

requires u8_is_inbounds(x);
pure int u8_require_inbounds(int x) = x;

ensures \result == (-128 <= x && x <= 127);
ensures \result == (x == bv8_to_sint(bv8_from_sint(x)));
pure boolean s8_is_inbounds(int x);

ensures \polarity_dependent(bv8_from_sint(bv8_to_sint(x)) == x, true);
pure boolean s8_assume_inbounds(bv8 x) = true;

requires s8_is_inbounds(x);
pure int s8_require_inbounds(int x) = x;

