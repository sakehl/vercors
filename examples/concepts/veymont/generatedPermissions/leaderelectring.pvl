class Node {
	int rank, maxVal, left, n;
	
	ensures rank == v && maxVal == v && left < v;
	ensures n == 0;
	constructor(int v);
	
	ensures left > \old(maxVal) ? maxVal == left : maxVal == \old(maxVal);
	ensures n == \old(n) + 1;
	ensures rank == \old(rank);
	ensures left == \old(left);
	void updateMax();
	
	ensures \result >= a && \result >= b && \result >= c;
	ensures \result == a || \result == b || \result == c;
	pure int maxVal(int a, int b, int c);
	
	ensures \result >= a && \result >= b && \result >= c && \result >= d;
	ensures \result == a || \result == b || \result == c || \result == d;
	pure int maxVal(int a, int b, int c, int d);
}

choreography leaderElectRing() {
    endpoint a = Node(0);
    endpoint b = Node(8);
    endpoint c = Node(4);
    endpoint d = Node(5);

	context (\chor a.rank != b.rank && a.rank != c.rank && a.rank != d.rank && b.rank != c.rank && b.rank != d.rank && c.rank != d.rank);
	requires (\chor c.n == 0 && a.n == c.n && b.n == c.n && d.n == c.n);
	requires a.maxVal == a.rank && b.maxVal == b.rank && c.maxVal == c.rank && d.maxVal == d.rank;
	ensures (\chor c.maxVal == a.maxVal && c.maxVal == b.maxVal && c.maxVal == d.maxVal);
	ensures (\chor c.maxVal == c.maxVal(a.rank,b.rank,d.rank,c.rank));
	ensures (\chor c.maxVal == a.rank || c.maxVal == b.rank || c.maxVal == c.rank || c.maxVal == d.rank);
	run {
    loop_invariant a.rank == \old(a.rank) ** b.rank == \old(b.rank) ** c.rank == \old(c.rank) ** d.rank == \old(d.rank);
		loop_invariant (\chor a.rank != b.rank && a.rank != c.rank && a.rank != d.rank && b.rank != c.rank && b.rank != d.rank && c.rank != d.rank);
		loop_invariant 0 <= c.n && c.n <= 3;
		loop_invariant (\chor a.n == c.n && b.n == c.n && d.n == c.n);
		loop_invariant (\chor (c.n == 0 ==> a.maxVal == a.rank && b.maxVal == b.rank &&  c.maxVal == c.rank &&  d.maxVal == d.rank)
		  ** (c.n == 1 ==> (d.rank > a.rank ? a.maxVal == d.rank : a.maxVal == a.rank))
		  ** (c.n == 1 ==> (a.rank > b.rank ? b.maxVal == a.rank : b.maxVal == b.rank))
		  ** (c.n == 1 ==> (b.rank > c.rank ? c.maxVal == b.rank : c.maxVal == c.rank))
		  ** (c.n == 1 ==> (c.rank > d.rank ? d.maxVal == c.rank : d.maxVal == d.rank))
		  ** (c.n == 2 ==> a.maxVal == a.maxVal(a.rank, c.rank, d.rank))
		  ** (c.n == 2 ==> b.maxVal == b.maxVal(a.rank, b.rank, d.rank))
		  ** (c.n == 2 ==> c.maxVal == c.maxVal(c.rank, b.rank, a.rank))
		  ** (c.n == 2 ==> d.maxVal == d.maxVal(b.rank, c.rank, d.rank))
		  ** (c.n == 3 ==> a.maxVal == a.maxVal(a.rank, b.rank, c.rank, d.rank))
		  ** (c.n == 3 ==> b.maxVal == b.maxVal(a.rank, b.rank, c.rank, d.rank))
		  ** (c.n == 3 ==> c.maxVal == c.maxVal(a.rank, b.rank, c.rank, d.rank))
		  ** (c.n == 3 ==> d.maxVal == d.maxVal(a.rank, b.rank, c.rank, d.rank)));
		while (a.n < 3 && b.n < 3 && c.n < 3 && d.n < 3) {
			communicate a.left <- d.maxVal;
			communicate b.left <- a.maxVal;
			communicate c.left <- b.maxVal;
			communicate d.left <- c.maxVal;
			a.updateMax();
			b.updateMax();
			c.updateMax();
			d.updateMax();
		}
		assert c.n == 3;
		assert (\chor a.maxVal == a.maxVal(a.rank,b.rank,c.rank,d.rank));
	}
}

